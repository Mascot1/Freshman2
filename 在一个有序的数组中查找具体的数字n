
//第一种做法  次数最多为n次
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int i, k = 7;
	int sz = sizeof(arr) / sizeof arr[0];//用数组总长度/单个长度求出数组元数个数
	for (i = 1; i <= sz; i++) {
		if (k = arr[i]) 
		{
			printf("找到了，下标是：%d", i);
			break;
		}
	}
	if (i == sz) 
		printf("找不到\n");
	return 0;
}



//第二种解放---二分法查找  次数最多 为log以2为底n的对数
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int left = 0;//左下标
	int right = sz - 1;//右下标

	while (right >= left)
	{
		int mid = (left + right) / 2;//定义在循环里头，因为二分法查找每次中间都会变
		if (arr[mid] > k) {
			right = mid - 1;
		}
		else if (arr[mid] < k) {
			left = mid + 1;
		}
		else 
		{
			printf("找到了，下标是：%d", mid);
			break;
		}
	}
	if (left > right) {
		printf("找不到\n");
	}
	return 0;
}
